import 'dart:io';
import 'dart:math';

import 'package:carpio_boardingbuddy/screens/after_chore.dart';
import 'package:carpio_boardingbuddy/screens/home_boarding_screen.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:quickalert/quickalert.dart';

class SummaryChore extends StatefulWidget {
  SummaryChore(this.beforeChoreImage, this.afterChoreImage, this.choreId,
      {super.key});

  File beforeChoreImage;
  File afterChoreImage;
  String choreId;

  @override
  State<SummaryChore> createState() => _SummaryChoreState();
}

class _SummaryChoreState extends State<SummaryChore> {
  String boardingId = '', userId = '', fname = '', lname = '';

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    getData();
  }

  void getData() async {
    final User? user = FirebaseAuth.instance.currentUser;
    String _uid = user!.uid;
    var userData =
        await FirebaseFirestore.instance.collection('users').doc(_uid).get();
    boardingId = userData['boarding id'];
    userId = userData['id'];
    fname = userData['first name'];
    lname = userData['last name'];

    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    String beforeChoreURL;
    String afterChoreURL;
    File beforeChoreImage = File(widget.beforeChoreImage.path);
    File afterChoreImage = File(widget.afterChoreImage.path);
    String choreId = widget.choreId;
    String choreName = '';

    void getChoreName() async {
      var choreData = await FirebaseFirestore.instance
          .collection('boardings')
          .doc(boardingId)
          .collection('chores')
          .doc(choreId)
          .get();
      choreName = choreData['chore name'];

      setState(() {});
    }

    int random() {
      Random random = new Random();
      int randomNumber = random.nextInt(10000);
      return randomNumber;
    }

    void submitChore() async {
      getChoreName();
      QuickAlert.show(
          context: context,
          type: QuickAlertType.loading,
          title: 'Submitting your chore...');
      try {
        String beforeImageName = 'before' + random().toString();
        String afterImageName = 'after' + random().toString();

        final beforeImg = FirebaseStorage.instance
            .ref()
            .child('ChoreImages')
            .child('$beforeImageName.jpg');
        await beforeImg.putFile(beforeChoreImage);

        final afterImg = FirebaseStorage.instance
            .ref()
            .child('ChoreImages')
            .child('$afterImageName.jpg');
        await afterImg.putFile(afterChoreImage);

        beforeChoreURL = await beforeImg.getDownloadURL();

        afterChoreURL = await afterImg.getDownloadURL();

        var newDocRef = FirebaseFirestore.instance
            .collection('boardings')
            .doc(boardingId)
            .collection('chores')
            .doc(choreId)
            .collection('chore history')
            .doc();


        await newDocRef.set({
          'before chore': beforeChoreURL,
          'after chore': afterChoreURL,
          'date and time': DateTime.now(),
          'user id': userId,
          'first name': fname,
          'last name': lname,
          'chore name': choreName,
          'chore id' : choreId,
        });

        String autoGeneratedId = newDocRef.id;

        Navigator.of(context).pop();
        await newDocRef
            .update({'chore history id': autoGeneratedId}).then((value) {
          Navigator.of(context).pushReplacement(
            MaterialPageRoute(
              builder: (_) => const BoardingHouse(),
            ),
          );
        });
      } catch (e) {
        print(e);
      }
    }

    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          onPressed: () {
            Navigator.of(context).pushReplacement(
              MaterialPageRoute(
                builder: (_) => AfterChore(beforeChoreImage, choreId),
              ),
            );
          },
          icon: const Icon(Icons.arrow_back_ios),
        ),
      ),
      body: Center(
        child: SingleChildScrollView(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.start,
            children: [
              const SizedBox(
                height: 15,
              ),
              const Text(
                '---------------BEFORE DOING THE CHORE---------------',
                style: TextStyle(
                  fontSize: 16,
                  color: Colors.black,
                ),
              ),
              const SizedBox(
                height: 15,
              ),
              Container(
                height: 400,
                width: 300,
                decoration: BoxDecoration(
                    border: Border.all(
                  color: Colors.black,
                )),
                child: Image.file(
                  widget.beforeChoreImage,
                  fit: BoxFit.cover,
                ),
              ),
              const SizedBox(
                height: 30,
              ),
              const Text(
                '---------------AFTER DOING THE CHORE---------------',
                style: TextStyle(
                  fontSize: 16,
                  color: Colors.black,
                ),
              ),
              const SizedBox(
                height: 15,
              ),
              Container(
                height: 400,
                width: 300,
                decoration: BoxDecoration(
                    border: Border.all(
                  color: Colors.black,
                )),
                child: Image.file(
                  widget.afterChoreImage,
                  fit: BoxFit.cover,
                ),
              ),
              const SizedBox(
                height: 30,
              ),
              Padding(
                padding: const EdgeInsets.all(15.0),
                child: SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: () {
                      submitChore();
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                    ),
                    child: const Text(
                      'SUBMIT',
                      style: TextStyle(
                        fontSize: 17,
                        color: Colors.white,
                      ),
                    ),
                  ),
                ),
              ),
              const SizedBox(
                height: 30,
              ),
            ],
          ),
        ),
      ),
    );
  }
}
